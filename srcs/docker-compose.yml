# docker-compose.yml

services:
  # TRAEFIK
  traefik:
    build:
      context: ./requirements/traefik
      dockerfile: Dockerfile
    container_name: traefik
    ports:
      - 9080:80
      - 9443:443
      # -- (Optional) Enable Dashboard, don't do in production
      - 8080:8080
    volumes:
      - ./requirements/traefik/config:/etc/traefik
      - ./requirements/traefik/config/ssl/:/ssl-certs
      - "${XDG_RUNTIME_DIR:-/var/run}/docker.sock:/var/run/docker.sock"
      #- /var/run/docker.sock:/var/run/docker.sock
    networks:
      - transcendence
    restart: unless-stopped
    depends_on:
      - game
    logging:
      driver: json-file
      options:
        max-size: "1m"
        max-file: "3"

  # FRONT END
  front-end:
    container_name: front-end
    build:
      context: ./requirements/front-end/
      dockerfile: Dockerfile
    env_file:
      - .env
    networks:
      - transcendence
    logging:
      driver: json-file
      options:
        max-size: "1m"
        max-file: "3"

  # react with vite and HMR for development
  js-dev:
    container_name: js-dev
    build:
      context: ./requirements/front-end/
      dockerfile: Dockerfile.dev
    volumes:
      - ./requirements/front-end/vanilla/:/app/src # Mount the source code
    env_file:
      - .env
    networks:
      - transcendence
    logging:
      driver: json-file
      options:
        max-size: "1m"
        max-file: "3"

  #BACKEND GAME SERVICES
  game:
    container_name: game
    build: 
      context: ./requirements/game/
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    networks:
      - transcendence
    volumes:
      - ./requirements/traefik/config/ssl/:/etc/game/ssl/
      - ./requirements/game/:/app/
    logging:
      driver: json-file
      options:
        max-size: "1m"
        max-file: "3"

  # USER MANAGEMENT DJANGO
  user_management:
    container_name: user_management
    restart: always
    build:
      context: ./requirements/user_management/
      dockerfile: Dockerfile
    #ports:
    #  - 8000:8000
    volumes:
      - ./requirements/user_management/project:/app
    depends_on:
      - user_management_db
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${USER_MANAGEMENT_DB_NAME}
      POSTGRES_USER: ${USER_MANAGEMENT_DB_USER}
      POSTGRES_PASSWORD: ${USER_MANAGEMENT_DB_PASSWORD}
      POSTGRES_UNIX_SOCKET_DIRECTORIES: ${USER_MANAGEMENT_DB_SOCKET}
    networks:
      - transcendence
    logging:
      driver: json-file
      options:
        max-size: "1m"
        max-file: "3"

  # USER MANAGEMENT DB
  user_management_db:
    container_name: user_management_db
    build:
      context: ./requirements/user_management_db/
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_DB: ${USER_MANAGEMENT_DB_NAME}
      POSTGRES_USER: ${USER_MANAGEMENT_DB_USER}
      POSTGRES_PASSWORD: ${USER_MANAGEMENT_DB_PASSWORD}
      POSTGRES_UNIX_SOCKET_DIRECTORIES: ${USER_MANAGEMENT_DB_SOCKET}
    volumes:
      - user-management-db:/var/lib/postgresql/data
    networks:
        - transcendence
    logging:
      driver: json-file
      options:
        max-size: "1m"
        max-file: "3"

  adminer:
    container_name: adminer
    image: adminer:latest
    networks:
      - transcendence
    ports:
      - "1029:8080"

  # TOURNAMENT SERVICE DJANGO
  tournament:
    container_name: tournament
    build:
      context: ./requirements/tournament_service/
      dockerfile: Dockerfile
    networks:
      - transcendence
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${TOURNAMENT_DB_NAME}
      POSTGRES_USER: ${TOURNAMENT_DB_USER}
      POSTGRES_PASSWORD: ${TOURNAMENT_DB_PASSWORD}
      POSTGRES_UNIX_SOCKET_DIRECTORIES: ${USER_MANAGEMENT_DB_SOCKET}
    volumes:
      - ./requirements/tournament_service/app:/app
    #ports:
    #  - 8034:8000
    logging:
      driver: json-file
      options:
        max-size: "1m"
        max-file: "3"

  # TOURNAMENT DB
  tournament_db:
    container_name: tournament_db
    build:
      context: ./requirements/tournament_db/
      dockerfile: Dockerfile
    restart: always
    environment:
      POSTGRES_DB: ${TOURNAMENT_DB_NAME}
      POSTGRES_USER: ${TOURNAMENT_DB_USER}
      POSTGRES_PASSWORD: ${TOURNAMENT_DB_PASSWORD}
    volumes:
      - tournament-db:/var/lib/postgresql/data
    # ports:
    #   - 55432:5432
    networks:
      - transcendence
    logging:
      driver: json-file
      options:
        max-size: "1m"
        max-file: "3"


#VOLUMES
volumes:
  user-management-db:
    driver: local
  tournament-db:
    driver: local


#NETWORKS
networks:
  transcendence:
    name: transcendence
    driver: bridge
